import{_ as s,c as n,a2 as t,o as e}from"./chunks/framework.D1T-GOrs.js";const r=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"doc/husky.md","filePath":"doc/husky.md"}'),p={name:"doc/husky.md"};function i(o,a,c,l,d,u){return e(),n("div",null,a[0]||(a[0]=[t(`<h3 id="概述" tabindex="-1">概述 <a class="header-anchor" href="#概述" aria-label="Permalink to &quot;概述&quot;">​</a></h3><p>在代码提交时难免有为修改到的地方没有进行格式化或者规范化操作，如果直接更新上去可能会为代码逻辑埋下隐患，所以可以在项目中使用 husky 进行代码格式规范化。</p><h3 id="基本使用" tabindex="-1">基本使用 <a class="header-anchor" href="#基本使用" aria-label="Permalink to &quot;基本使用&quot;">​</a></h3><p>（1）安装 可以使用官方包工具进行初始化操作，首先可以使用： 安装 husky <code>npm i husky</code> <code>npx husky-init</code> 初始化完成后，会自动在项目的 package.json 文件中生成相关指令 <code> &quot;prepare&quot;: &quot;husky&quot;</code></p><p>然后在根目录下生成.husky 文件夹，里面会生成 husky 提交过程中的各项钩子，如 pre-commit，就是在 git commit 提交时触发，所以可以在 pre-commit 文件中定义格式验证指令：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>#!/usr/bin/env sh</span></span>
<span class="line"><span></span></span>
<span class="line"><span>npm run lint-staged</span></span></code></pre></div><p>*一般用到的钩子就是 pre-commit、 commit-msg</p><p>（2）lint-staged，暂存区格式验证 但是在代码提交时我们不一定需要对所有的文件格式都进行验证，可能只需要对提交的内容进行格式验证，所以需要借助 lint-staged <code>npm intsall lint-staged </code> 在 package.json 文件中配置：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>&quot;scripts&quot;: {</span></span>
<span class="line"><span>    ...</span></span>
<span class="line"><span>    &quot;lint-staged&quot;: &quot;lint-staged&quot;</span></span>
<span class="line"><span>},</span></span>
<span class="line"><span>&quot;lint-staged&quot;: {</span></span>
<span class="line"><span>    &quot;src/**&quot;: [</span></span>
<span class="line"><span>        &quot;echo &#39;begin to lint staged ts or tsx file&#39;&quot;,</span></span>
<span class="line"><span>        &quot;eslint --fix .ts,.vue src&quot;</span></span>
<span class="line"><span>    ]</span></span>
<span class="line"><span>}</span></span></code></pre></div><p>安装后，在执行 git commit 提交前，会先对暂存区的代码进行格式检测。</p><p>（3）commitizen，git msg 格式验证 安装依赖</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>npm i @commitlint/config-conventional@12.1.4 @commitlint/cli@12.1.4 -D</span></span></code></pre></div><h3 id="" tabindex="-1"><img src="https://qn-kms.yolanda.hk/uploads/c6abc268-89e3-4d56-9ff0-d8c8f66e58a3/630183e4-261e-4c30-93c0-403c00251d85/image.png" alt="" title=" =257x344"> <a class="header-anchor" href="#" aria-label="Permalink to &quot;![](https://qn-kms.yolanda.hk/uploads/c6abc268-89e3-4d56-9ff0-d8c8f66e58a3/630183e4-261e-4c30-93c0-403c00251d85/image.png &quot; =257x344&quot;)&quot;">​</a></h3>`,13)]))}const m=s(p,[["render",i]]);export{r as __pageData,m as default};
